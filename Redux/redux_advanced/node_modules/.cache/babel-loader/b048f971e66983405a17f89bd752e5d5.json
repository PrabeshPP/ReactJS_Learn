{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { showCartActions } from \"./UI\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst CartSlice = createSlice({\n  name: \"Cart Slice\",\n  initialState: initialCartState,\n  reducers: {\n    addToCart(state, action) {\n      const newItem = action.payload;\n      const itemExist = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!itemExist) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        itemExist.quantity++;\n        itemExist.totalPrice = itemExist.totalPrice + newItem.price;\n      }\n    },\n\n    removeFromCart(state, action) {\n      const id = action.payload;\n      const itemExist = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (itemExist.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        itemExist.quantity--;\n        itemExist.totalPrice = itemExist.totalPrice - itemExist.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(showCartActions.showNotification({\n      status: \"Pending\",\n      title: \"Sending...\",\n      message: \"Sending Cart Data\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://foodapp-c413b-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data failed!\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(showCartActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent Cart Data Successfully!\"\n      }));\n    } catch (error) {\n      dispatch(showCartActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Could not Sent Cart Data Successfully!\"\n      }));\n    }\n  };\n};\nexport default CartSlice;\nexport const cartSliceAction = CartSlice.actions;","map":{"version":3,"sources":["C:/Users/prabe/OneDrive/Desktop/ReactJS/reactJS_intro/Redux/redux_advanced/src/Store/cart-slice.js"],"names":["createSlice","showCartActions","initialCartState","items","totalQuantity","CartSlice","name","initialState","reducers","addToCart","state","action","newItem","payload","itemExist","find","item","id","push","price","quantity","totalPrice","title","removeFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartSliceAction","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { showCartActions } from \"./UI\";\r\n\r\nconst initialCartState = {\r\n  items: [],\r\n  totalQuantity: 0,\r\n};\r\n\r\nconst CartSlice = createSlice({\r\n  name: \"Cart Slice\",\r\n  initialState: initialCartState,\r\n\r\n  reducers: {\r\n    addToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const itemExist = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!itemExist) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        itemExist.quantity++;\r\n        itemExist.totalPrice = itemExist.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeFromCart(state, action) {\r\n      const id = action.payload;\r\n      const itemExist = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      if (itemExist.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        itemExist.quantity--;\r\n        itemExist.totalPrice = itemExist.totalPrice - itemExist.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const sendCartData = (cart) => {\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      showCartActions.showNotification({\r\n        status: \"Pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending Cart Data\",\r\n      })\r\n    );\r\n\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://foodapp-c413b-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(cart),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending Cart Data failed!\");\r\n      }\r\n    };\r\n\r\n    try {\r\n        await sendRequest();\r\n        dispatch(\r\n            showCartActions.showNotification({\r\n              status: \"success\",\r\n              title: \"Success!\",\r\n              message: \"Sent Cart Data Successfully!\",\r\n            })\r\n          );\r\n    } catch (error) {\r\n        dispatch(\r\n            showCartActions.showNotification({\r\n              status: \"error\",\r\n              title: \"Error!\",\r\n              message: \"Could not Sent Cart Data Successfully!\",\r\n            })\r\n          )\r\n\r\n        \r\n    }\r\n\r\n   \r\n  };\r\n};\r\n\r\nexport default CartSlice;\r\nexport const cartSliceAction = CartSlice.actions;\r\n"]},"metadata":{},"sourceType":"module"}